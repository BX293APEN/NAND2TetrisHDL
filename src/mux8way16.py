from NAND2Tetris import Chip
import os
if __name__ == "__main__":
    directory = os.path.dirname(os.path.abspath(__file__))
    and3 = Chip(name="And3")
    and3.chip_io(["a", "b", "c"], ["out"])
    and3.add_function("And", ["a", "b"], ["a", "b"], ["out"], ["ab"])
    and3.add_function("And", ["a", "b"], ["ab", "c"], ["out"], ["out"])
    and3.dump(f"{directory}/Mux8Way16.thdl")
    
    mux8way16 = Chip(name="Mux8Way16")
    mux8way16.chip_io(["a[16]", "b[16]", "c[16]", "d[16]", "e[16]", "f[16]", "g[16]", "h[16]", "sel[3]"], ["out[16]"])
    mux8way16.add_function("Not", ["in"], ["sel[0]"], ["out"], ["notsel0"])
    mux8way16.add_function("Not", ["in"], ["sel[1]"], ["out"], ["notsel1"])
    mux8way16.add_function("Not", ["in"], ["sel[2]"], ["out"], ["notsel2"])
    mux8way16.add_comment("MSB : sel[2] LSB : sel[0] の順番")
    mux8way16.add_function("And3", ["a", "b", "c"], ["notsel2", "notsel1", "notsel0"], ["out"], ["selA"])
    mux8way16.add_function("And3", ["a", "b", "c"], ["notsel2", "notsel1", "sel[0]"], ["out"], ["selB"])
    mux8way16.add_function("And3", ["a", "b", "c"], ["notsel2", "sel[1]", "notsel0"], ["out"], ["selC"])
    mux8way16.add_function("And3", ["a", "b", "c"], ["notsel2", "sel[1]", "sel[0]"], ["out"], ["selD"])
    mux8way16.add_function("And3", ["a", "b", "c"], ["sel[2]", "notsel1", "notsel0"], ["out"], ["selE"])
    mux8way16.add_function("And3", ["a", "b", "c"], ["sel[2]", "notsel1", "sel[0]"], ["out"], ["selF"])
    mux8way16.add_function("And3", ["a", "b", "c"], ["sel[2]", "sel[1]", "notsel0"], ["out"], ["selG"])
    mux8way16.add_function("And3", ["a", "b", "c"], ["sel[2]", "sel[1]", "sel[0]"], ["out"], ["selH"])

    mux8way16.add_comment("チップをセレクトする")
    mux8way16.add_function("And", ["a", "b"], ["a", "selA"], ["out"], ["aVal"], lsb=0, msb=16, directPin=["selA"], internal=["aVal"])
    mux8way16.add_function("And", ["a", "b"], ["b", "selB"], ["out"], ["bVal"], lsb=0, msb=16, directPin=["selB"], internal=["bVal"])
    mux8way16.add_function("And", ["a", "b"], ["c", "selC"], ["out"], ["cVal"], lsb=0, msb=16, directPin=["selC"], internal=["cVal"])
    mux8way16.add_function("And", ["a", "b"], ["d", "selD"], ["out"], ["dVal"], lsb=0, msb=16, directPin=["selD"], internal=["dVal"])
    mux8way16.add_function("And", ["a", "b"], ["e", "selE"], ["out"], ["eVal"], lsb=0, msb=16, directPin=["selE"], internal=["eVal"])
    mux8way16.add_function("And", ["a", "b"], ["f", "selF"], ["out"], ["fVal"], lsb=0, msb=16, directPin=["selF"], internal=["fVal"])
    mux8way16.add_function("And", ["a", "b"], ["g", "selG"], ["out"], ["gVal"], lsb=0, msb=16, directPin=["selG"], internal=["gVal"])
    mux8way16.add_function("And", ["a", "b"], ["h", "selH"], ["out"], ["hVal"], lsb=0, msb=16, directPin=["selH"], internal=["hVal"])

    mux8way16.add_comment("結果の合成")
    mux8way16.add_function("Or", ["a", "b"], ["aVal", "bVal"], ["out"], ["abVal"], lsb=0, msb=16, internal=["aVal", "bVal", "abVal"])
    mux8way16.add_function("Or", ["a", "b"], ["cVal", "dVal"], ["out"], ["cdVal"], lsb=0, msb=16, internal=["cVal", "dVal", "cdVal"])
    mux8way16.add_function("Or", ["a", "b"], ["eVal", "fVal"], ["out"], ["efVal"], lsb=0, msb=16, internal=["eVal", "fVal", "efVal"])
    mux8way16.add_function("Or", ["a", "b"], ["gVal", "hVal"], ["out"], ["ghVal"], lsb=0, msb=16, internal=["gVal", "hVal", "ghVal"])

    mux8way16.add_function("Or", ["a", "b"], ["abVal", "cdVal"], ["out"], ["abcdVal"], lsb=0, msb=16, internal=["abVal", "cdVal", "abcdVal"])
    mux8way16.add_function("Or", ["a", "b"], ["efVal", "ghVal"], ["out"], ["efghVal"], lsb=0, msb=16, internal=["efVal", "ghVal", "efghVal"])
    mux8way16.add_function("Or", ["a", "b"], ["abcdVal", "efghVal"], ["out"], ["out"], lsb=0, msb=16, internal=["abcdVal", "efghVal"])
    mux8way16.dump(f"{directory}/Mux8Way16.thdl", "a")