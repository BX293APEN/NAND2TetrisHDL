// ALU CHIP
CHIP ALU {
    IN x[16], y[16], zx, nx, zy, ny, f, no;
    OUT out[16], zr, ng;
    PARTS:
        // zx : 1 → xを0にする
        Not(in=zx, out=nzx);
        And(a=x[0], b=nzx, out=xzx0);
        And(a=x[1], b=nzx, out=xzx1);
        And(a=x[2], b=nzx, out=xzx2);
        And(a=x[3], b=nzx, out=xzx3);
        And(a=x[4], b=nzx, out=xzx4);
        And(a=x[5], b=nzx, out=xzx5);
        And(a=x[6], b=nzx, out=xzx6);
        And(a=x[7], b=nzx, out=xzx7);
        And(a=x[8], b=nzx, out=xzx8);
        And(a=x[9], b=nzx, out=xzx9);
        And(a=x[10], b=nzx, out=xzx10);
        And(a=x[11], b=nzx, out=xzx11);
        And(a=x[12], b=nzx, out=xzx12);
        And(a=x[13], b=nzx, out=xzx13);
        And(a=x[14], b=nzx, out=xzx14);
        And(a=x[15], b=nzx, out=xzx15);
        // nx : 1 → xを反転する
        Xor(a=xzx0, b=nx, out=xVal0);
        Xor(a=xzx1, b=nx, out=xVal1);
        Xor(a=xzx2, b=nx, out=xVal2);
        Xor(a=xzx3, b=nx, out=xVal3);
        Xor(a=xzx4, b=nx, out=xVal4);
        Xor(a=xzx5, b=nx, out=xVal5);
        Xor(a=xzx6, b=nx, out=xVal6);
        Xor(a=xzx7, b=nx, out=xVal7);
        Xor(a=xzx8, b=nx, out=xVal8);
        Xor(a=xzx9, b=nx, out=xVal9);
        Xor(a=xzx10, b=nx, out=xVal10);
        Xor(a=xzx11, b=nx, out=xVal11);
        Xor(a=xzx12, b=nx, out=xVal12);
        Xor(a=xzx13, b=nx, out=xVal13);
        Xor(a=xzx14, b=nx, out=xVal14);
        Xor(a=xzx15, b=nx, out=xVal15);
        // zy : 1 → yを0にする
        Not(in=zy, out=nzy);
        And(a=y[0], b=nzy, out=yzy0);
        And(a=y[1], b=nzy, out=yzy1);
        And(a=y[2], b=nzy, out=yzy2);
        And(a=y[3], b=nzy, out=yzy3);
        And(a=y[4], b=nzy, out=yzy4);
        And(a=y[5], b=nzy, out=yzy5);
        And(a=y[6], b=nzy, out=yzy6);
        And(a=y[7], b=nzy, out=yzy7);
        And(a=y[8], b=nzy, out=yzy8);
        And(a=y[9], b=nzy, out=yzy9);
        And(a=y[10], b=nzy, out=yzy10);
        And(a=y[11], b=nzy, out=yzy11);
        And(a=y[12], b=nzy, out=yzy12);
        And(a=y[13], b=nzy, out=yzy13);
        And(a=y[14], b=nzy, out=yzy14);
        And(a=y[15], b=nzy, out=yzy15);
        // nx : 1 → xを反転する
        Xor(a=yzy0, b=ny, out=yVal0);
        Xor(a=yzy1, b=ny, out=yVal1);
        Xor(a=yzy2, b=ny, out=yVal2);
        Xor(a=yzy3, b=ny, out=yVal3);
        Xor(a=yzy4, b=ny, out=yVal4);
        Xor(a=yzy5, b=ny, out=yVal5);
        Xor(a=yzy6, b=ny, out=yVal6);
        Xor(a=yzy7, b=ny, out=yVal7);
        Xor(a=yzy8, b=ny, out=yVal8);
        Xor(a=yzy9, b=ny, out=yVal9);
        Xor(a=yzy10, b=ny, out=yVal10);
        Xor(a=yzy11, b=ny, out=yVal11);
        Xor(a=yzy12, b=ny, out=yVal12);
        Xor(a=yzy13, b=ny, out=yVal13);
        Xor(a=yzy14, b=ny, out=yVal14);
        Xor(a=yzy15, b=ny, out=yVal15);
        // 半加算回路で全ビット計算
        HalfAdder(a=xVal0, b=yVal0, sum=bitSumXY0, carry=bitCarryXY0);
        HalfAdder(a=xVal1, b=yVal1, sum=bitSumXY1, carry=bitCarryXY1);
        HalfAdder(a=xVal2, b=yVal2, sum=bitSumXY2, carry=bitCarryXY2);
        HalfAdder(a=xVal3, b=yVal3, sum=bitSumXY3, carry=bitCarryXY3);
        HalfAdder(a=xVal4, b=yVal4, sum=bitSumXY4, carry=bitCarryXY4);
        HalfAdder(a=xVal5, b=yVal5, sum=bitSumXY5, carry=bitCarryXY5);
        HalfAdder(a=xVal6, b=yVal6, sum=bitSumXY6, carry=bitCarryXY6);
        HalfAdder(a=xVal7, b=yVal7, sum=bitSumXY7, carry=bitCarryXY7);
        HalfAdder(a=xVal8, b=yVal8, sum=bitSumXY8, carry=bitCarryXY8);
        HalfAdder(a=xVal9, b=yVal9, sum=bitSumXY9, carry=bitCarryXY9);
        HalfAdder(a=xVal10, b=yVal10, sum=bitSumXY10, carry=bitCarryXY10);
        HalfAdder(a=xVal11, b=yVal11, sum=bitSumXY11, carry=bitCarryXY11);
        HalfAdder(a=xVal12, b=yVal12, sum=bitSumXY12, carry=bitCarryXY12);
        HalfAdder(a=xVal13, b=yVal13, sum=bitSumXY13, carry=bitCarryXY13);
        HalfAdder(a=xVal14, b=yVal14, sum=bitSumXY14, carry=bitCarryXY14);
        HalfAdder(a=xVal15, b=yVal15, sum=bitSumXY15, carry=bitCarryXY15);
        And(a=bitSumXY0, b=bitSumXY0, out=sum0);
        And(a=bitCarryXY0, b=bitCarryXY0, out=carry0);
        HalfAdder(a=bitSumXY1, b=carry0, sum=sum1, carry=carryXYC1);
        Or(a=bitCarryXY1, b=carryXYC1, out=carry1);
        HalfAdder(a=bitSumXY2, b=carry1, sum=sum2, carry=carryXYC2);
        Or(a=bitCarryXY2, b=carryXYC2, out=carry2);
        HalfAdder(a=bitSumXY3, b=carry2, sum=sum3, carry=carryXYC3);
        Or(a=bitCarryXY3, b=carryXYC3, out=carry3);
        HalfAdder(a=bitSumXY4, b=carry3, sum=sum4, carry=carryXYC4);
        Or(a=bitCarryXY4, b=carryXYC4, out=carry4);
        HalfAdder(a=bitSumXY5, b=carry4, sum=sum5, carry=carryXYC5);
        Or(a=bitCarryXY5, b=carryXYC5, out=carry5);
        HalfAdder(a=bitSumXY6, b=carry5, sum=sum6, carry=carryXYC6);
        Or(a=bitCarryXY6, b=carryXYC6, out=carry6);
        HalfAdder(a=bitSumXY7, b=carry6, sum=sum7, carry=carryXYC7);
        Or(a=bitCarryXY7, b=carryXYC7, out=carry7);
        HalfAdder(a=bitSumXY8, b=carry7, sum=sum8, carry=carryXYC8);
        Or(a=bitCarryXY8, b=carryXYC8, out=carry8);
        HalfAdder(a=bitSumXY9, b=carry8, sum=sum9, carry=carryXYC9);
        Or(a=bitCarryXY9, b=carryXYC9, out=carry9);
        HalfAdder(a=bitSumXY10, b=carry9, sum=sum10, carry=carryXYC10);
        Or(a=bitCarryXY10, b=carryXYC10, out=carry10);
        HalfAdder(a=bitSumXY11, b=carry10, sum=sum11, carry=carryXYC11);
        Or(a=bitCarryXY11, b=carryXYC11, out=carry11);
        HalfAdder(a=bitSumXY12, b=carry11, sum=sum12, carry=carryXYC12);
        Or(a=bitCarryXY12, b=carryXYC12, out=carry12);
        HalfAdder(a=bitSumXY13, b=carry12, sum=sum13, carry=carryXYC13);
        Or(a=bitCarryXY13, b=carryXYC13, out=carry13);
        HalfAdder(a=bitSumXY14, b=carry13, sum=sum14, carry=carryXYC14);
        Or(a=bitCarryXY14, b=carryXYC14, out=carry14);
        HalfAdder(a=bitSumXY15, b=carry14, sum=sum15, carry=carryXYC15);
        Or(a=bitCarryXY15, b=carryXYC15, out=carry15);
        // f : 1 → sumN  0 : → bitCarryXYN
        Mux(a=bitCarryXY0, b=sum0, sel=f, out=calcVal0);
        Mux(a=bitCarryXY1, b=sum1, sel=f, out=calcVal1);
        Mux(a=bitCarryXY2, b=sum2, sel=f, out=calcVal2);
        Mux(a=bitCarryXY3, b=sum3, sel=f, out=calcVal3);
        Mux(a=bitCarryXY4, b=sum4, sel=f, out=calcVal4);
        Mux(a=bitCarryXY5, b=sum5, sel=f, out=calcVal5);
        Mux(a=bitCarryXY6, b=sum6, sel=f, out=calcVal6);
        Mux(a=bitCarryXY7, b=sum7, sel=f, out=calcVal7);
        Mux(a=bitCarryXY8, b=sum8, sel=f, out=calcVal8);
        Mux(a=bitCarryXY9, b=sum9, sel=f, out=calcVal9);
        Mux(a=bitCarryXY10, b=sum10, sel=f, out=calcVal10);
        Mux(a=bitCarryXY11, b=sum11, sel=f, out=calcVal11);
        Mux(a=bitCarryXY12, b=sum12, sel=f, out=calcVal12);
        Mux(a=bitCarryXY13, b=sum13, sel=f, out=calcVal13);
        Mux(a=bitCarryXY14, b=sum14, sel=f, out=calcVal14);
        Mux(a=bitCarryXY15, b=sum15, sel=f, out=calcVal15);
        // no : 1 → calcValを反転する
        Xor(a=calcVal0, b=no, out=outVal0);
        Xor(a=calcVal1, b=no, out=outVal1);
        Xor(a=calcVal2, b=no, out=outVal2);
        Xor(a=calcVal3, b=no, out=outVal3);
        Xor(a=calcVal4, b=no, out=outVal4);
        Xor(a=calcVal5, b=no, out=outVal5);
        Xor(a=calcVal6, b=no, out=outVal6);
        Xor(a=calcVal7, b=no, out=outVal7);
        Xor(a=calcVal8, b=no, out=outVal8);
        Xor(a=calcVal9, b=no, out=outVal9);
        Xor(a=calcVal10, b=no, out=outVal10);
        Xor(a=calcVal11, b=no, out=outVal11);
        Xor(a=calcVal12, b=no, out=outVal12);
        Xor(a=calcVal13, b=no, out=outVal13);
        Xor(a=calcVal14, b=no, out=outVal14);
        Xor(a=calcVal15, b=no, out=outVal15);
        // ngフラグ生成
        And(a=outVal15, b=outVal15, out=ng);
        // zrフラグ生成
        Or(a=outVal0, b=outVal15, out=zrVal0);
        Or(a=outVal1, b=outVal14, out=zrVal1);
        Or(a=outVal2, b=outVal13, out=zrVal2);
        Or(a=outVal3, b=outVal12, out=zrVal3);
        Or(a=outVal4, b=outVal11, out=zrVal4);
        Or(a=outVal5, b=outVal10, out=zrVal5);
        Or(a=outVal6, b=outVal9, out=zrVal6);
        Or(a=outVal7, b=outVal8, out=zrVal7);
        Or(a=zrVal0, b=zrVal7, out=zrVal8);
        Or(a=zrVal1, b=zrVal6, out=zrVal9);
        Or(a=zrVal2, b=zrVal5, out=zrVal10);
        Or(a=zrVal3, b=zrVal4, out=zrVal11);
        Or(a=zrVal8, b=zrVal11, out=zrVal12);
        Or(a=zrVal9, b=zrVal10, out=zrVal13);
        Or(a=zrVal12, b=zrVal13, out=zrVal14);
        Not(in=zrVal14, out=zr);
        // 出力生成
        Not(in=outVal0, out=notOutVal0);
        Not(in=outVal1, out=notOutVal1);
        Not(in=outVal2, out=notOutVal2);
        Not(in=outVal3, out=notOutVal3);
        Not(in=outVal4, out=notOutVal4);
        Not(in=outVal5, out=notOutVal5);
        Not(in=outVal6, out=notOutVal6);
        Not(in=outVal7, out=notOutVal7);
        Not(in=outVal8, out=notOutVal8);
        Not(in=outVal9, out=notOutVal9);
        Not(in=outVal10, out=notOutVal10);
        Not(in=outVal11, out=notOutVal11);
        Not(in=outVal12, out=notOutVal12);
        Not(in=outVal13, out=notOutVal13);
        Not(in=outVal14, out=notOutVal14);
        Not(in=outVal15, out=notOutVal15);
        Not(in=notOutVal0, out=out[0]);
        Not(in=notOutVal1, out=out[1]);
        Not(in=notOutVal2, out=out[2]);
        Not(in=notOutVal3, out=out[3]);
        Not(in=notOutVal4, out=out[4]);
        Not(in=notOutVal5, out=out[5]);
        Not(in=notOutVal6, out=out[6]);
        Not(in=notOutVal7, out=out[7]);
        Not(in=notOutVal8, out=out[8]);
        Not(in=notOutVal9, out=out[9]);
        Not(in=notOutVal10, out=out[10]);
        Not(in=notOutVal11, out=out[11]);
        Not(in=notOutVal12, out=out[12]);
        Not(in=notOutVal13, out=out[13]);
        Not(in=notOutVal14, out=out[14]);
        Not(in=notOutVal15, out=out[15]);
}